{"version":3,"sources":["components/icons/heart.js","components/planets/cards.js","components/planets/allPlanets.js","components/planets/selectedPlanets.js","components/modal/index.js","components/planets/index.js","App.js","reportWebVitals.js","index.js"],"names":["Heart","props","className","xmlns","width","height","viewBox","fillRule","stroke","strokeWidth","d","Cards","planet","favplanetHandler","name","onClick","id","isFavourite","AllPlanets","planetsData","map","SelectedPlanets","filter","length","PopupModal","show","setShow","successUncheckFav","message","handleClose","Modal","onHide","Header","closeButton","Title","modalHeading","Body","modalMessage","Footer","changeIndex","Button","variant","fetcher","window","fetch","bind","Planets","useState","allPlanets","setAllPlanets","isFavPlanet","setPlanetType","setShowMessage","getAllPlanets","a","responseData","status","json","useEffect","tempPlanet","availableIndex","findIndex","uncheckFavPlanet","data-toggle","data-target","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e80cca38.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport function Heart(props) {\r\n  const { className } = props\r\n  return (\r\n    <svg\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      width=\"24\"\r\n      height=\"24\"\r\n      viewBox=\"0 0 24 24\"\r\n      className={className}\r\n    >\r\n      <path\r\n        fillRule=\"nonzero\"\r\n        stroke=\"currentColor\"\r\n        strokeWidth=\"1.5\"\r\n        d=\"M12 22.85l9.54-11.086c2.27-2.623 2.289-6.633.017-9.186C19.293.14 15.632.14 13.39 2.555L12 4.18l-.57-.668-.81-.947C9.56 1.376 8.131.78 6.537.78c-1.594 0-3.023.595-4.083 1.786-2.283 2.565-2.263 6.575.008 9.2L12 22.85z\"\r\n      />\r\n    </svg>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Heart } from '../icons/heart'\r\n\r\n/**\r\n *\r\n * @param {*} planet to show with fav icon\r\n */\r\nexport default function Cards({ planet, favplanetHandler }) {\r\n  return (\r\n    <div className=\"card\">\r\n      <span>{planet.name}</span>\r\n      <span className=\"cur-pointer\" onClick={() => favplanetHandler(planet.id)}>\r\n        <Heart\r\n          className={planet.isFavourite ? 'fav-selected' : 'fav-no-selected'}\r\n        />\r\n      </span>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport Cards from './cards'\r\n\r\n/**\r\n *\r\n * @param {*} list of all planets\r\n */\r\nexport default function AllPlanets({ planetsData, favplanetHandler }) {\r\n  return (\r\n    <div className=\"itme-list\">\r\n      <span>All Planets</span>\r\n      {planetsData.map((planet) => (\r\n        <Cards\r\n          planet={planet}\r\n          favplanetHandler={favplanetHandler}\r\n          key={planet.id}\r\n        />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport Cards from './cards'\r\n\r\n/**\r\n *\r\n * @param {*} planetsData for selected as favorite list\r\n */\r\n\r\nexport default function SelectedPlanets({ planetsData, favplanetHandler }) {\r\n  return (\r\n    <div className=\"itme-list\">\r\n      <span>Favorite Planets</span>\r\n      {planetsData.map(\r\n        (planet) =>\r\n          planet.isFavourite && (\r\n            <Cards\r\n              planet={planet}\r\n              favplanetHandler={favplanetHandler}\r\n              key={planet.id}\r\n            />\r\n          )\r\n      )}\r\n      {planetsData.filter((planet) => planet.isFavourite && planet).length ===\r\n        0 && <p className=\"no-planet\">Oop's there is no favorite planet.</p>}\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Modal, Button } from 'react-bootstrap'\r\nimport './style.css'\r\nexport function PopupModal({ show, setShow, successUncheckFav, message }) {\r\n  const handleClose = () => setShow(false)\r\n\r\n  return (\r\n    <>\r\n      <Modal show={show} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>{message.modalHeading}</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>{message.modalMessage}</Modal.Body>\r\n        <Modal.Footer>\r\n          {message.changeIndex !== 'Error' && (\r\n            <Button variant=\"secondary\" onClick={handleClose}>\r\n              cancel\r\n            </Button>\r\n          )}\r\n          <Button\r\n            variant=\"primary\"\r\n            onClick={() => successUncheckFav(message.changeIndex)}\r\n          >\r\n            {message.changeIndex !== 'Error' ? ' yes' : 'Retry'}\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport AllPlanets from './allPlanets'\r\nimport SelectedPlanets from './selectedPlanets'\r\nimport { PopupModal } from '../modal'\r\nimport './style.css'\r\n// api url for get Data\r\nconst PLANET_API_URL = 'https://assignment-machstatz.herokuapp.com'\r\n// end point for get planet data\r\nconst PLANET_END_POINT = '/planet'\r\n// for call an api using window.fetch\r\nconst fetcher = window.fetch.bind(window)\r\n\r\nexport default function Planets() {\r\n  /**\r\n   * for store all the planets\r\n   */\r\n  const [allPlanets, setAllPlanets] = useState([])\r\n  /**\r\n   * for track user which planet is seeing\r\n   */\r\n  const [isFavPlanet, setPlanetType] = useState(false)\r\n  /**\r\n   * for show modal warning and error type\r\n   */\r\n  const [show, setShow] = useState(false)\r\n\r\n  const [message, setShowMessage] = useState({\r\n    modalHeading: '',\r\n    modalMessage: '',\r\n    changeIndex: 0,\r\n  })\r\n\r\n  const networkErrorHandler = () => {\r\n    setShowMessage({\r\n      modalHeading: 'Alert',\r\n      modalMessage: 'Oops something went wrong, please try again',\r\n      changeIndex: 'Error',\r\n    })\r\n    setShow(true)\r\n  }\r\n  /**\r\n   * TODO: pagination, move to repository file\r\n   * for fetch all planets data onload\r\n   */\r\n  const getAllPlanets = async () => {\r\n    const responseData = await fetcher(`${PLANET_API_URL}${PLANET_END_POINT}`)\r\n    if (responseData.status === 200) {\r\n      const planetsData = await responseData.json()\r\n      setAllPlanets(planetsData)\r\n    } else networkErrorHandler()\r\n  }\r\n\r\n  /**\r\n   * call api on window onLoad\r\n   */\r\n  useEffect(() => {\r\n    if (!allPlanets.length) getAllPlanets()\r\n  }, [allPlanets])\r\n\r\n  /**\r\n   *\r\n   * @param {*} changeIndex if user want to confirm then successfully remove\r\n   */\r\n  const successUncheckFav = (changeIndex) => {\r\n    const tempPlanet = [...allPlanets]\r\n    tempPlanet[changeIndex].isFavourite = false\r\n    setAllPlanets(tempPlanet)\r\n    setShow(false)\r\n  }\r\n\r\n  /**\r\n   * for show modal when user uncheck a fav planer\r\n   */\r\n  const uncheckFavPlanet = (availableIndex) => {\r\n    // tempPlanet[availableIndex].isFavourite = false\r\n    setShowMessage({\r\n      modalHeading: 'Alert',\r\n      modalMessage: 'Are you sure to want remove planet from favorite list',\r\n      changeIndex: availableIndex,\r\n    })\r\n    setShow(true)\r\n  }\r\n  /**\r\n   * for select and unselect fav icon\r\n   */\r\n  const favplanetHandler = (id) => {\r\n    const tempPlanet = [...allPlanets]\r\n    const availableIndex = tempPlanet.findIndex((planet) => planet.id === id)\r\n    if (tempPlanet[availableIndex].isFavourite) {\r\n      uncheckFavPlanet(availableIndex)\r\n    } else {\r\n      tempPlanet[availableIndex].isFavourite = true\r\n      setAllPlanets(tempPlanet)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {!allPlanets.length ? (\r\n        <div className=\"loader\" />\r\n      ) : (\r\n        <section>\r\n          <PopupModal\r\n            show={show}\r\n            setShow={setShow}\r\n            message={message}\r\n            successUncheckFav={successUncheckFav}\r\n          />\r\n          <div className=\"action-buttons\">\r\n            <div>\r\n              <button\r\n                onClick={() => setPlanetType(false)}\r\n                data-toggle=\"modal\"\r\n                data-target=\"#exampleModal\"\r\n              >\r\n                All Planets\r\n              </button>\r\n              <button onClick={() => setPlanetType(true)}>\r\n                Favorite Planets\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <div>\r\n            {!isFavPlanet ? (\r\n              <AllPlanets\r\n                planetsData={allPlanets}\r\n                favplanetHandler={favplanetHandler}\r\n              />\r\n            ) : (\r\n              <SelectedPlanets\r\n                planetsData={allPlanets}\r\n                favplanetHandler={favplanetHandler}\r\n              />\r\n            )}\r\n          </div>\r\n        </section>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport Planets from './components/planets'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1 className=\"heading-text\">Welcome to Planets</h1>\r\n      <Planets />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry)\r\n      getFID(onPerfEntry)\r\n      getFCP(onPerfEntry)\r\n      getLCP(onPerfEntry)\r\n      getTTFB(onPerfEntry)\r\n    })\r\n  }\r\n}\r\n\r\nexport default reportWebVitals\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport reportWebVitals from './reportWebVitals'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}